{"ast":null,"code":"var _jsxFileName = \"/Users/andrewdyson/Documents/Study/Codeclan_work/Capstone_Project/Project_Code/geothermal_energy_app/Client/src/Containers/GraphContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Graph from '../Components/Graph';\nimport GraphInputForm from '../Components/GraphInputForm';\nimport GraphService from '../Services/GraphService';\nimport LocationList from '../Components/LocationList';\nimport RegionList from '../Components/RegionList';\nimport PlotByRegionButton from '../Components/PlotByRegionButton';\nimport './GraphContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphContainer = () => {\n  _s();\n  const [plotImage, setPlotImage] = useState(null);\n  // const [inputData, setInputData] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [regions, setRegions] = useState([]);\n\n  // useEffect(() => {\n  //   fetch('http://127.0.0.1:5000/graphdata')\n  //     .then(res => res.json())\n  //     .then(data => setPlotImage(data.image))\n  // }, [plotImage]);\n\n  useEffect(() => {\n    getLocationData();\n  }, []);\n  function getLocationData() {\n    fetch('http://127.0.0.1:5000/data/locations').then(res => res.json())\n    // .then(data => console.log(data))\n    .then(data => setLocationData(data));\n  }\n  useEffect(() => {\n    setRegions(getRegions());\n  }, []);\n  const getRegions = () => {\n    const inputted_regions = [{\n      name: \"Caithness, Scotland\",\n      region_id: 1\n    }, {\n      name: \"East Grampians, Scotland\",\n      region_id: 2\n    }, {\n      name: \"Western Central Belt, Scotland\",\n      region_id: 3\n    }, {\n      name: \"Eastern Central Belt, Scotland\",\n      region_id: 4\n    }, {\n      name: \"Dumfries and Galloway, Scotland\",\n      region_id: 5\n    }];\n    // let location\n    // for (location in locationData)\n    // {\n    //   let region\n    //   let counter = 0\n    //   for ( region in regions) {\n    //     if (region === location.region)\n    //     counter += 1\n    //   }\n    //   {regions.push(location.region)}\n    // }\n    return inputted_regions;\n  };\n  function createGraph(geoData) {\n    GraphService.addGraph(geoData).then(data => {\n      console.log(data);\n      // setPlotImage(data.image)\n    }).then(data => console.log(data.image));\n  }\n  function createGraphWithLocation(geoData) {\n    GraphService.addGraphWithLocation(geoData).then(data => {\n      console.log(data);\n      // setPlotImage(data.image)\n    }).then(data => console.log(data));\n  }\n  function createGraphAllLocationsByRegion() {\n    let regions = [];\n    regions = getRegions();\n    GraphService.addGraphWithLocationsByRegion(regions).then(data => {\n      console.log(data);\n      // setPlotImage(data.image)\n    }).then(data => console.log(data));\n  }\n  function createGraphWithRegion(geoData) {\n    GraphService.addGraphWithRegion(geoData).then(data => {\n      console.log(data);\n    }).then(data => console.log(data));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"GraphImage\",\n        src: \"Images/TestImage1.png\",\n        alt: \"Image of outputted graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"SelectInputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"LocationList\",\n        children: /*#__PURE__*/_jsxDEV(LocationList, {\n          locationData: locationData,\n          createGraphWithLocation: createGraphWithLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"RegionList\",\n        children: /*#__PURE__*/_jsxDEV(RegionList, {\n          regions: regions,\n          createGraphWithRegion: createGraphWithRegion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PlotByRegionButton, {\n        createGraphAllLocationsByRegion: createGraphAllLocationsByRegion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GraphInputForm, {\n      createGraph: createGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphContainer, \"+BjADFE864pt5OGeTy/q/7uQglw=\");\n_c = GraphContainer;\nexport default GraphContainer;\nvar _c;\n$RefreshReg$(_c, \"GraphContainer\");","map":{"version":3,"names":["React","useState","useEffect","Graph","GraphInputForm","GraphService","LocationList","RegionList","PlotByRegionButton","jsxDEV","_jsxDEV","GraphContainer","_s","plotImage","setPlotImage","locationData","setLocationData","regions","setRegions","getLocationData","fetch","then","res","json","data","getRegions","inputted_regions","name","region_id","createGraph","geoData","addGraph","console","log","image","createGraphWithLocation","addGraphWithLocation","createGraphAllLocationsByRegion","addGraphWithLocationsByRegion","createGraphWithRegion","addGraphWithRegion","children","className","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andrewdyson/Documents/Study/Codeclan_work/Capstone_Project/Project_Code/geothermal_energy_app/Client/src/Containers/GraphContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Graph from '../Components/Graph';\nimport GraphInputForm from '../Components/GraphInputForm';\nimport GraphService from '../Services/GraphService';\nimport LocationList from '../Components/LocationList';\nimport RegionList from '../Components/RegionList';\nimport PlotByRegionButton from '../Components/PlotByRegionButton';\nimport './GraphContainer.css'\n\nconst GraphContainer = () => {\n  const [plotImage, setPlotImage] = useState(null);\n  // const [inputData, setInputData] = useState([]);\n  const [locationData, setLocationData] = useState([]);\n  const [regions, setRegions] = useState([]);\n\n  // useEffect(() => {\n  //   fetch('http://127.0.0.1:5000/graphdata')\n  //     .then(res => res.json())\n  //     .then(data => setPlotImage(data.image))\n  // }, [plotImage]);\n\n  useEffect(() => {\n    getLocationData() \n  }, [])\n\n  function getLocationData(){\n    fetch('http://127.0.0.1:5000/data/locations')\n    .then(res => res.json())\n    // .then(data => console.log(data))\n    .then(data => setLocationData(data))\n  }\n\n  useEffect(() => {\n    setRegions(getRegions())\n  }, [])\n\n  const getRegions = () => {\n    const inputted_regions = [{\n      name: \"Caithness, Scotland\",\n      region_id: 1\n    }, \n    {\n      name: \"East Grampians, Scotland\",\n      region_id: 2\n    }, \n    {\n      name: \"Western Central Belt, Scotland\",\n      region_id: 3\n    }, \n    {\n      name: \"Eastern Central Belt, Scotland\",\n      region_id: 4\n    },\n    {\n      name: \"Dumfries and Galloway, Scotland\",\n      region_id: 5\n    }]\n    // let location\n    // for (location in locationData)\n    // {\n    //   let region\n    //   let counter = 0\n    //   for ( region in regions) {\n    //     if (region === location.region)\n    //     counter += 1\n    //   }\n    //   {regions.push(location.region)}\n    // }\n    return inputted_regions\n  }\n\n  function createGraph(geoData) {\n    GraphService.addGraph(geoData)\n    .then(data => {\n      console.log(data)\n      // setPlotImage(data.image)\n    })\n    .then(data => console.log(data.image))\n    }\n\n    function createGraphWithLocation(geoData) {\n      GraphService.addGraphWithLocation(geoData)\n      .then(data => {\n        console.log(data)\n        // setPlotImage(data.image)\n      })\n      .then(data => console.log(data))\n      }\n\n\n  function createGraphAllLocationsByRegion() {\n    let regions = []\n    regions = getRegions()\n  \n    GraphService.addGraphWithLocationsByRegion(regions)\n    .then(data => {\n      console.log(data)\n      // setPlotImage(data.image)\n    })\n    .then(data => console.log(data))\n    }\n\n  function createGraphWithRegion(geoData) {\n    GraphService.addGraphWithRegion(geoData)\n    .then(data => {\n      console.log(data)\n    })\n    .then(data => console.log(data))\n    }\n\n\n\n  return (\n    <div>\n      <div>\n        <img className=\"GraphImage\" src=\"Images/TestImage1.png\" alt=\"Image of outputted graph\" />\n      </div>\n      <div className=\"SelectInputs\">\n    <ul className=\"LocationList\">\n      <LocationList locationData={locationData} createGraphWithLocation={createGraphWithLocation}/>\n    </ul>\n    <ul className=\"RegionList\">\n      <RegionList regions={regions} createGraphWithRegion={createGraphWithRegion}/>\n    </ul>\n      <PlotByRegionButton createGraphAllLocationsByRegion={createGraphAllLocationsByRegion}/>\n      </div>\n      <GraphInputForm createGraph={createGraph}/>\n    </div>\n  );\n}\n\nexport default GraphContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}