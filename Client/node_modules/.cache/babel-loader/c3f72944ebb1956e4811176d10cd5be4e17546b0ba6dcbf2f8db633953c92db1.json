{"ast":null,"code":"var _jsxFileName = \"/Users/andrewdyson/Documents/Study/Codeclan_work/Capstone_Project/Project_Code/geothermal_energy_app/Client/src/Containers/ResCalcContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ResourceCalcInput from '../Components/ResourceCalcInput';\nimport ResourceCalcOutput from '../Components/ResourceCalcOutput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResCalcContainer = () => {\n  _s();\n  const [heatInPlaceCalcResult, setHeatInPlaceCalcResult] = useState(null);\n  const [recoverableHeatCalcResult, setRecoverableHeatCalcResult] = useState(null);\n  const [energyDemand, setEnergyDemand] = useState(null);\n  const [difference, setDifference] = useState(null);\n  const calculateHeatInPlace = variables_object => {\n    let result = 0;\n    let thickness = 0;\n    let area = 0;\n    let porosity = 0;\n    let fluidSpecificDensity = 0;\n    let rockSpecificDensity = 0;\n    let fluidSpecificHeatCapacity = 0;\n    let rockSpecificHeatCapacity = 0;\n    let reservoirTemperature = 0;\n    let recoveryFactor = 0;\n    let demand = 0;\n    thickness = variables_object.thickness;\n    area = variables_object.area;\n    porosity = variables_object.porosity;\n    fluidSpecificDensity = variables_object.fluid_specific_density;\n    rockSpecificDensity = variables_object.rock_specific_density;\n    fluidSpecificHeatCapacity = variables_object.fluid_specific_heat_capacity;\n    rockSpecificHeatCapacity = variables_object.rock_specific_heat_capacity;\n    reservoirTemperature = variables_object.reservoir_temperature;\n    demand = variables_object.demand;\n    result = area * 1000000 * thickness * (porosity * fluidSpecificDensity * fluidSpecificHeatCapacity * (1 - porosity) * rockSpecificDensity * rockSpecificHeatCapacity) * reservoirTemperature / 1000;\n    let difference = result - demand;\n    setHeatInPlaceCalcResult(result);\n    setEnergyDemand(demand);\n    setDifference(difference);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ResourceCalcInput, {\n      calculateHeatInPlace: calculateHeatInPlace\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ResourceCalcOutput, {\n      heatInPlaceCalcResult: heatInPlaceCalcResult,\n      recoverableHeatCalcResult: recoverableHeatCalcResult,\n      energyDemand: energyDemand,\n      difference: difference\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(ResCalcContainer, \"AYNkmf+6rxs60XL0ZvBiP1/NMfE=\");\n_c = ResCalcContainer;\nexport default ResCalcContainer;\nvar _c;\n$RefreshReg$(_c, \"ResCalcContainer\");","map":{"version":3,"names":["React","useState","useEffect","ResourceCalcInput","ResourceCalcOutput","jsxDEV","_jsxDEV","ResCalcContainer","_s","heatInPlaceCalcResult","setHeatInPlaceCalcResult","recoverableHeatCalcResult","setRecoverableHeatCalcResult","energyDemand","setEnergyDemand","difference","setDifference","calculateHeatInPlace","variables_object","result","thickness","area","porosity","fluidSpecificDensity","rockSpecificDensity","fluidSpecificHeatCapacity","rockSpecificHeatCapacity","reservoirTemperature","recoveryFactor","demand","fluid_specific_density","rock_specific_density","fluid_specific_heat_capacity","rock_specific_heat_capacity","reservoir_temperature","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andrewdyson/Documents/Study/Codeclan_work/Capstone_Project/Project_Code/geothermal_energy_app/Client/src/Containers/ResCalcContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ResourceCalcInput from '../Components/ResourceCalcInput';\nimport ResourceCalcOutput from '../Components/ResourceCalcOutput';\n\n\nconst ResCalcContainer = () => {\n    const [heatInPlaceCalcResult, setHeatInPlaceCalcResult] = useState(null);\n    const [recoverableHeatCalcResult, setRecoverableHeatCalcResult] = useState(null);\n    const [energyDemand, setEnergyDemand] = useState(null);\n    const [difference, setDifference] = useState(null);\n\n\n    const calculateHeatInPlace = (variables_object) => {\n        let result = 0\n        let thickness = 0\n        let area = 0\n        let porosity = 0\n        let fluidSpecificDensity = 0\n        let rockSpecificDensity = 0\n        let fluidSpecificHeatCapacity = 0\n        let rockSpecificHeatCapacity = 0\n        let reservoirTemperature = 0\n        let recoveryFactor = 0\n\n        let demand = 0\n\n        thickness = variables_object.thickness\n        area = variables_object.area\n        porosity = variables_object.porosity\n        fluidSpecificDensity = variables_object.fluid_specific_density\n        rockSpecificDensity = variables_object.rock_specific_density\n        fluidSpecificHeatCapacity = variables_object.fluid_specific_heat_capacity\n        rockSpecificHeatCapacity = variables_object.rock_specific_heat_capacity\n        reservoirTemperature = variables_object.reservoir_temperature\n    \n        demand = variables_object.demand\n\n        result = (((area*1000000)*thickness)*(porosity*fluidSpecificDensity*fluidSpecificHeatCapacity*(1-porosity)*rockSpecificDensity*rockSpecificHeatCapacity)*reservoirTemperature)/1000\n        let difference = result - demand\n        setHeatInPlaceCalcResult(result)\n        setEnergyDemand(demand)\n        setDifference(difference)\n    }\n\n    return(\n        <div>\n        <ResourceCalcInput \n        calculateHeatInPlace={calculateHeatInPlace}/>\n        <ResourceCalcOutput \n        heatInPlaceCalcResult={heatInPlaceCalcResult}\n        recoverableHeatCalcResult={recoverableHeatCalcResult}\n        energyDemand={energyDemand}\n        difference={difference}\n        />\n        </div>\n    )\n\n}\n\nexport default ResCalcContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,iBAAiB,MAAM,iCAAiC;AAC/D,OAAOC,kBAAkB,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlE,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxE,MAAM,CAACU,yBAAyB,EAAEC,4BAA4B,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChF,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAGlD,MAAMgB,oBAAoB,GAAIC,gBAAgB,IAAK;IAC/C,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,SAAS,GAAG,CAAC;IACjB,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,oBAAoB,GAAG,CAAC;IAC5B,IAAIC,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,yBAAyB,GAAG,CAAC;IACjC,IAAIC,wBAAwB,GAAG,CAAC;IAChC,IAAIC,oBAAoB,GAAG,CAAC;IAC5B,IAAIC,cAAc,GAAG,CAAC;IAEtB,IAAIC,MAAM,GAAG,CAAC;IAEdT,SAAS,GAAGF,gBAAgB,CAACE,SAAS;IACtCC,IAAI,GAAGH,gBAAgB,CAACG,IAAI;IAC5BC,QAAQ,GAAGJ,gBAAgB,CAACI,QAAQ;IACpCC,oBAAoB,GAAGL,gBAAgB,CAACY,sBAAsB;IAC9DN,mBAAmB,GAAGN,gBAAgB,CAACa,qBAAqB;IAC5DN,yBAAyB,GAAGP,gBAAgB,CAACc,4BAA4B;IACzEN,wBAAwB,GAAGR,gBAAgB,CAACe,2BAA2B;IACvEN,oBAAoB,GAAGT,gBAAgB,CAACgB,qBAAqB;IAE7DL,MAAM,GAAGX,gBAAgB,CAACW,MAAM;IAEhCV,MAAM,GAAME,IAAI,GAAC,OAAO,GAAED,SAAS,IAAGE,QAAQ,GAACC,oBAAoB,GAACE,yBAAyB,IAAE,CAAC,GAACH,QAAQ,CAAC,GAACE,mBAAmB,GAACE,wBAAwB,CAAC,GAACC,oBAAoB,GAAE,IAAI;IACnL,IAAIZ,UAAU,GAAGI,MAAM,GAAGU,MAAM;IAChCnB,wBAAwB,CAACS,MAAM,CAAC;IAChCL,eAAe,CAACe,MAAM,CAAC;IACvBb,aAAa,CAACD,UAAU,CAAC;EAC7B,CAAC;EAED,oBACIT,OAAA;IAAA6B,QAAA,gBACA7B,OAAA,CAACH,iBAAiB;MAClBc,oBAAoB,EAAEA;IAAqB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC7CjC,OAAA,CAACF,kBAAkB;MACnBK,qBAAqB,EAAEA,qBAAsB;MAC7CE,yBAAyB,EAAEA,yBAA0B;MACrDE,YAAY,EAAEA,YAAa;MAC3BE,UAAU,EAAEA;IAAW;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAGd,CAAC;AAAA/B,EAAA,CApDKD,gBAAgB;AAAAiC,EAAA,GAAhBjC,gBAAgB;AAsDtB,eAAeA,gBAAgB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}